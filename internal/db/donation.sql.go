// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: donation.sql

package db

import (
	"context"
	"time"
)

const createDonation = `-- name: CreateDonation :one
insert into donation(user, channel, send_from, amount, text)    
VALUES(?, ?, ?, ?, ?)
RETURNING id, user, channel, send_from, amount, text, timestamp
`

type CreateDonationParams struct {
	User     string
	Channel  string
	SendFrom string
	Amount   int64
	Text     string
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (Donation, error) {
	row := q.db.QueryRowContext(ctx, createDonation,
		arg.User,
		arg.Channel,
		arg.SendFrom,
		arg.Amount,
		arg.Text,
	)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Channel,
		&i.SendFrom,
		&i.Amount,
		&i.Text,
		&i.Timestamp,
	)
	return i, err
}

const getSumDonationByStreamer = `-- name: GetSumDonationByStreamer :many
SELECT
    CAST(COALESCE(SUM(d.amount), 0) AS INTEGER) AS amount,
    CAST(strftime('%Y-%m-%d', MIN(d."timestamp")) AS TEXT)  AS StartingDate,
    CAST(strftime('%Y-%m-%d', MAX(d."timestamp")) AS TEXT)  AS EndingDate,
    d.channel
FROM donation d 
WHERE d."timestamp" BETWEEN ? AND ?
GROUP BY d.channel
`

type GetSumDonationByStreamerParams struct {
	FromTimestamp time.Time
	ToTimestamp   time.Time
}

type GetSumDonationByStreamerRow struct {
	Amount       int64
	Startingdate string
	Endingdate   string
	Channel      string
}

func (q *Queries) GetSumDonationByStreamer(ctx context.Context, arg GetSumDonationByStreamerParams) ([]GetSumDonationByStreamerRow, error) {
	rows, err := q.db.QueryContext(ctx, getSumDonationByStreamer, arg.FromTimestamp, arg.ToTimestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSumDonationByStreamerRow
	for rows.Next() {
		var i GetSumDonationByStreamerRow
		if err := rows.Scan(
			&i.Amount,
			&i.Startingdate,
			&i.Endingdate,
			&i.Channel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
